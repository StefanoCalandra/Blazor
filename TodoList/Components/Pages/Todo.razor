@page "/todo"
@rendermode InteractiveServer
@inject ProtectedLocalStorage LocalStorage

<h3 class="mb-3">Todo (@ActiveCount active)</h3>
<p class="text-muted">Tasks now persist to protected browser storage, include due dates, and support tag-based organization.</p>

@if (isLoading)
{
    <div class="alert alert-info d-flex align-items-center gap-2" role="status">
        <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
        <span>Loading saved tasks...</span>
    </div>
}
else
{
    if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-warning" role="alert">@errorMessage</div>
    }

    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <div class="row g-3 align-items-end">
                <div class="col-md-5">
                    <label class="form-label" for="newTodo">Task</label>
                    <input id="newTodo" class="form-control" placeholder="Plan sprint demo" @bind="newTodo" @bind:event="oninput" />
                </div>
                <div class="col-md-3">
                    <label class="form-label" for="dueDate">Due date</label>
                    <input id="dueDate" type="date" class="form-control" @bind="newDueDate" />
                </div>
                <div class="col-md-3">
                    <label class="form-label" for="tags">Tags (comma separated)</label>
                    <input id="tags" class="form-control" placeholder="team,frontend" @bind="newTags" @bind:event="oninput" />
                </div>
                <div class="col-md-1 d-grid">
                    <button class="btn btn-primary" @onclick="AddTodoAsync" disabled="@IsAddDisabled">Add</button>
                </div>
            </div>
        </div>
    </div>

    <div class="d-flex flex-wrap align-items-center gap-3 mb-3">
        <div class="d-flex align-items-center gap-2">
            <label class="form-label mb-0" for="tagFilter">Filter by tag</label>
            <select id="tagFilter" class="form-select form-select-sm w-auto" @bind="selectedTag">
                <option value="">All</option>
                @foreach (var tag in AvailableTags)
                {
                    <option value="@tag">@tag</option>
                }
            </select>
        </div>
        <div class="ms-auto d-flex align-items-center gap-2">
            <button class="btn btn-outline-secondary btn-sm" @onclick="ClearCompletedAsync" disabled="@(!todoItems.Any(item => item.IsDone))">Clear completed</button>
            @if (lastSavedAt is not null)
            {
                <span class="text-muted small">Saved @lastSavedAt.Value.ToLocalTime():t</span>
            }
        </div>
    </div>

    @if (FilteredTodos.Count == 0)
    {
        <p class="text-muted">No tasks to show. Add a new item or adjust the tag filter.</p>
    }
    else
    {
        <ul class="list-group mb-3">
            @foreach (var todo in FilteredTodos)
            {
                var overdue = IsOverdue(todo);
                var dueSoon = IsDueSoon(todo);
                <li class="list-group-item" @key="todo.Id">
                    <div class="d-flex align-items-start gap-3">
                        <input type="checkbox"
                               class="form-check-input mt-1"
                               checked="@todo.IsDone"
                               @onchange="async e => await ToggleTodoAsync(todo, e.Value is bool value && value)" />
                        <div class="flex-grow-1">
                            <div class="d-flex align-items-start justify-content-between gap-3">
                                <div>
                                    <div class="fw-semibold @(todo.IsDone ? "text-decoration-line-through text-muted" : string.Empty)">@todo.Title</div>
                                    @if (todo.Tags.Count > 0)
                                    {
                                        <div class="d-flex flex-wrap gap-1 mt-1">
                                            @foreach (var tag in todo.Tags)
                                            {
                                                <span class="badge bg-secondary">@tag</span>
                                            }
                                        </div>
                                    }
                                </div>
                                <div class="text-end">
                                    @if (todo.DueDate is not null)
                                    {
                                        <span class="badge @(overdue ? "bg-danger" : dueSoon ? "bg-warning text-dark" : "bg-info text-dark")">Due @todo.DueDate.Value.ToString("MMM d")</span>
                                    }
                                </div>
                            </div>
                            <div class="small text-muted mt-1">
                                @if (todo.IsDone && todo.CompletedAt is not null)
                                {
                                    <span>Completed @todo.CompletedAt.Value.ToLocalTime():g</span>
                                }
                                else if (overdue)
                                {
                                    <span>Overdue â€“ take action soon.</span>
                                }
                                else if (dueSoon)
                                {
                                    <span>Coming up soon. Plan your time.</span>
                                }
                            </div>
                        </div>
                        <button class="btn btn-link text-danger p-0" title="Delete task" @onclick="() => DeleteTodoAsync(todo)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </li>
            }
        </ul>

        @if (UpcomingDueSoon.Count > 0)
        {
            <div class="alert alert-warning" role="alert">
                <strong>Upcoming:</strong>
                @for (var i = 0; i < UpcomingDueSoon.Count; i++)
                {
                    var item = UpcomingDueSoon[i];
                    <span>@item.Title (@item.DueDate!.Value.ToString("MMM d"))</span>
                    if (i < UpcomingDueSoon.Count - 1)
                    {
                        <span>, </span>
                    }
                }
            </div>
        }
    }
}

@code {
    private const string StorageKey = "todo-items-v2";

    private List<TodoItem> todoItems = new();
    private string? newTodo = string.Empty;
    private DateTime? newDueDate;
    private string newTags = string.Empty;
    private string? selectedTag = string.Empty;
    private bool isLoading = true;
    private string? errorMessage;
    private DateTimeOffset? lastSavedAt;

    private int ActiveCount => todoItems.Count(todo => !todo.IsDone);
    private bool IsAddDisabled => string.IsNullOrWhiteSpace(newTodo);
    private IReadOnlyList<string> AvailableTags => todoItems
        .SelectMany(todo => todo.Tags)
        .Distinct(StringComparer.OrdinalIgnoreCase)
        .OrderBy(tag => tag)
        .ToArray();
    private List<TodoItem> FilteredTodos => string.IsNullOrWhiteSpace(selectedTag)
        ? todoItems
        : todoItems.Where(todo => todo.Tags.Any(tag => string.Equals(tag, selectedTag, StringComparison.OrdinalIgnoreCase))).ToList();
    private List<TodoItem> UpcomingDueSoon => todoItems
        .Where(todo => !todo.IsDone && todo.DueDate is not null && todo.DueDate.Value.Date <= DateTime.Today.AddDays(2))
        .OrderBy(todo => todo.DueDate)
        .Take(3)
        .ToList();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var stored = await LocalStorage.GetAsync<List<TodoItem>>(StorageKey);
            if (stored.Success && stored.Value is { Count: > 0 } saved)
            {
                todoItems = saved;
            }
            else
            {
                todoItems = SeedTasks();
                await PersistAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Unable to restore saved tasks: {ex.Message}";
            todoItems = SeedTasks();
            await PersistAsync();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task AddTodoAsync()
    {
        if (string.IsNullOrWhiteSpace(newTodo))
        {
            return;
        }

        var todo = new TodoItem
        {
            Title = newTodo.Trim(),
            DueDate = NormalizeDate(newDueDate),
            Tags = ParseTags(newTags)
        };

        todoItems.Add(todo);
        await PersistAsync();

        newTodo = string.Empty;
        newDueDate = null;
        newTags = string.Empty;
    }

    private async Task ToggleTodoAsync(TodoItem todo, bool isDone)
    {
        todo.IsDone = isDone;
        todo.CompletedAt = isDone ? DateTimeOffset.Now : null;
        await PersistAsync();
    }

    private async Task DeleteTodoAsync(TodoItem todo)
    {
        todoItems.Remove(todo);
        await PersistAsync();
    }

    private async Task ClearCompletedAsync()
    {
        todoItems = todoItems.Where(todo => !todo.IsDone).ToList();
        await PersistAsync();
    }

    private async Task PersistAsync()
    {
        await LocalStorage.SetAsync(StorageKey, todoItems);
        lastSavedAt = DateTimeOffset.Now;
        StateHasChanged();
    }

    private static List<TodoItem> SeedTasks() => new()
    {
        new TodoItem
        {
            Title = "Study C#",
            DueDate = DateTime.Today.AddDays(1),
            Tags = new List<string> { "learning", "backend" }
        },
        new TodoItem
        {
            Title = "Sketch dashboard layout",
            DueDate = DateTime.Today.AddDays(2),
            Tags = new List<string> { "design" }
        },
        new TodoItem
        {
            Title = "Plan Blazor demo",
            Tags = new List<string> { "blazor", "demo" }
        }
    };

    private static bool IsOverdue(TodoItem todo) => !todo.IsDone && todo.DueDate is DateTime due && due.Date < DateTime.Today;

    private static bool IsDueSoon(TodoItem todo) => !todo.IsDone && todo.DueDate is DateTime due && due.Date >= DateTime.Today && due.Date <= DateTime.Today.AddDays(2);

    private static List<string> ParseTags(string? tags) => string.IsNullOrWhiteSpace(tags)
        ? new List<string>()
        : tags.Split(',', StringSplitOptions.RemoveEmptyEntries)
            .Select(tag => tag.Trim())
            .Where(tag => tag.Length > 0)
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .ToList();

    private static DateTime? NormalizeDate(DateTime? date) => date?.Date;
}

<style>
    .list-group-item {
        transition: background-color 0.2s ease-in-out;
    }

    .list-group-item:hover {
        background-color: #f8f9fa;
    }
</style>
