@page "/category"
@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _JS

<BsModal OnModalConfirmation="ConfirmDelete" ButtonBootstrapStyle="btn-danger" ButtonText="Delete" Title="Are you sure you want to delete this category?"></BsModal>

@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Category List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <a href="category/create" class="btn btn-lg btn-secondary" style="width:250px;"><i class="bi bi-plus-square"></i>Add New Category</a>
                </div>
            </div>
            @if (Categories.Any())
            {
                <table class="table table-bordered table-hover">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var obj in Categories)
                        {
                            <tr>
                                <td>
                                    @obj.Name
                                </td>
                                <td>
                                    <a href="@($"category/update/{obj.Id}")" class="btn btn-primary">
                                        <i class="bi bi-pencil-square"></i>Edit
                                    </a>
                                    <button class="btn btn-danger" @onclick="@(async () => await HandleDeleteAsync(obj.Id))">
                                        <i class="bi bi-trash3"></i>Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="text-center text-muted mb-0">There are no categories to display yet.</p>
            }
        </div>
    </div>
}

@code {
    private bool IsProcessing { get; set; } = true;

    private IReadOnlyList<Category> Categories { get; set; } = Array.Empty<Category>();

    private int DeleteCategoryId { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategoriesAsync();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadCategoriesAsync()
    {
        Categories = await _categoryRepository.GetAllAsync();
    }

    private async Task HandleDeleteAsync(int id)
    {
        DeleteCategoryId = id;
        await _JS.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDelete(bool isConfirmed)
    {
        IsProcessing = true;
        await _JS.InvokeVoidAsync("HideConfirmationModal");

        if (isConfirmed && DeleteCategoryId != 0)
        {
            var result = await _categoryRepository.DeleteAsync(DeleteCategoryId);
            if (result)
            {
                await _JS.ToastrSuccess("Category deleted successfully.");
            }
            else
            {
                await _JS.ToastrError("We couldn't delete the selected category. Please try again.");
            }
            await LoadCategoriesAsync();
        }

        DeleteCategoryId = 0;
        IsProcessing = false;
    }
}
