@page "/category/create"
@page "/category/update/{id:int}"
@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager
@inject IJSRuntime _JS

@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@PageHeading</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <EditForm Model="Category" FormName="CategoryUpsertForm" OnValidSubmit="UpsertCategory">
                <DataAnnotationsValidator />

                <div class="border p-3 mt-4">
                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value="Category.Name" class="form-control" id="Name" placeholder="Name" />
                        <label for="Name">Name</label>
                        <ValidationMessage For="@(() => Category.Name)" />
                    </div>
                    <div class="row mt-3">
                        <div class="col-6 col-md-3">
                            <button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing">
                                <i class="bi bi-floppy2-fill"></i>@SubmitButtonText
                            </button>
                        </div>
                        <div class="col-6 col-md-3">
                            <a href="category" class="btn btn-secondary form-control" disabled="@IsProcessing">
                                <i class="bi bi-arrow-bar-left"></i>Back to List
                            </a>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private Category Category { get; set; } = new();

    private bool IsProcessing { get; set; } = true;

    private string PageHeading => Id > 0 ? "Update Category" : "Create Category";

    private string SubmitButtonText => Category.Id == 0 ? "Create" : "Update";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategory();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadCategory()
    {
        if (Id > 0)
        {
            var category = await _categoryRepository.GetAsync(Id);
            if (category is null)
            {
                await _JS.ToastrError("Unable to find the requested category.");
                _navigationManager.NavigateTo("category");
                return;
            }

            Category = category;
        }
    }

    private async Task UpsertCategory()
    {
        IsProcessing = true;
        if (Category.Id == 0)
        {
            await _categoryRepository.CreateAsync(Category);
            await _JS.ToastrSuccess("Category Created Successfully");
        }
        else
        {
            var updatedCategory = await _categoryRepository.UpdateAsync(Category);
            if (updatedCategory is null)
            {
                await _JS.ToastrError("Unable to update the category because it no longer exists.");
                _navigationManager.NavigateTo("category");
                IsProcessing = false;
                return;
            }
            await _JS.ToastrSuccess("Category Updated Successfully");
        }
        IsProcessing = false;
        _navigationManager.NavigateTo("category");
    }
}
