@page "/weather"
@inject LearnBlazor.Services.WeatherForecastService ForecastService

<PageTitle>Weather lab</PageTitle>

<div class="container py-4">
    <div class="row g-4">
        <div class="col-lg-7">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h1 class="h3">Interactive weather learning lab</h1>
                    <p class="text-muted">Explore how Blazor handles async data fetching, streaming updates, and cancelable background work without leaving this page.</p>

                    <div class="btn-toolbar gap-2 flex-wrap" role="group" aria-label="Weather lab controls">
                        <button class="btn btn-primary" @onclick="LoadSnapshotAsync" disabled="@isLoading">Load snapshot</button>
                        <button class="btn btn-outline-primary" @onclick="StartStreamingAsync" disabled="@isLoading">Stream updates</button>
                        <button class="btn btn-outline-success" @onclick="ToggleAutoRefreshAsync" disabled="@isLoading && !isAutoRefreshing">
                            @(isAutoRefreshing ? "Stop auto refresh" : "Start auto refresh")
                        </button>
                        <button class="btn btn-link text-danger" @onclick="CancelCurrentOperationAsync" disabled="@(!IsCancelable)">Cancel</button>
                    </div>

                    <div class="row g-3 mt-3">
                        <div class="col-sm-6">
                            <label class="form-label" for="intervalInput">Auto refresh interval (seconds)</label>
                            <InputNumber id="intervalInput"
                                         class="form-control"
                                         @bind-Value="autoRefreshIntervalSeconds"
                                         min="5"
                                         max="60"
                                         step="5"
                                         disabled="@isAutoRefreshing" />
                        </div>
                        <div class="col-sm-6">
                            <div class="form-check mt-4">
                                <input class="form-check-input" type="checkbox" id="liveUpdates" checked disabled />
                                <label class="form-check-label" for="liveUpdates">UI updates as data arrives</label>
                            </div>
                        </div>
                    </div>

                    <div class="mt-3">
                        @if (isLoading)
                        {
                            <div class="alert alert-info d-flex align-items-center gap-2" role="status">
                                <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                                <span>@statusMessage</span>
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(statusMessage))
                        {
                            <div class="alert alert-secondary" role="status">@statusMessage</div>
                        }

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">@errorMessage</div>
                        }
                    </div>

                    @if (forecasts.Count == 0)
                    {
                        <p class="text-muted mb-0">Trigger one of the actions above to populate the table with weather data.</p>
                    }
                    else
                    {
                        <div class="table-responsive mt-3">
                            <table class="table table-striped align-middle">
                                <thead>
                                    <tr>
                                        <th scope="col">Date</th>
                                        <th scope="col">Temp. (C)</th>
                                        <th scope="col">Temp. (F)</th>
                                        <th scope="col">Summary</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var forecast in forecasts)
                                    {
                                        <tr>
                                            <td>@forecast.Date.ToString("MMM d")</td>
                                            <td>@forecast.TemperatureC</td>
                                            <td>@forecast.TemperatureF</td>
                                            <td>@forecast.Summary</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-lg-5">
            <div class="card shadow-sm h-100">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <span>Event log</span>
                        <span class="badge bg-secondary">latest first</span>
                    </div>
                </div>
                <div class="card-body">
                    @if (eventLog.Count == 0)
                    {
                        <p class="text-muted mb-0">Events appear here as you exercise the different scenarios.</p>
                    }
                    else
                    {
                        <ol class="list-group list-group-numbered">
                            @foreach (var entry in eventLog)
                            {
                                <li class="list-group-item">@entry</li>
                            }
                        </ol>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private readonly List<WeatherForecast> forecasts = new();
    private readonly List<string> eventLog = new();

    private CancellationTokenSource? currentOperationCts;
    private string? statusMessage;
    private string? errorMessage;
    private bool isLoading;
    private bool isStreaming;
    private bool isAutoRefreshing;
    private int autoRefreshIntervalSeconds = 15;

    private bool IsCancelable => currentOperationCts is { IsCancellationRequested: false };

    private Task LoadSnapshotAsync() => ExecuteOperationAsync(async cancellationToken =>
    {
        var snapshot = await ForecastService.GetForecastAsync(cancellationToken);
        await UpdateUiAsync(() =>
        {
            forecasts.Clear();
            forecasts.AddRange(snapshot);
            PushEvent($"Snapshot loaded at {DateTime.Now:T}");
            statusMessage = "Snapshot loaded from the service.";
        });
    }, "Loading a single snapshot...");

    private Task StartStreamingAsync() => ExecuteOperationAsync(async cancellationToken =>
    {
        isStreaming = true;
        await UpdateUiAsync(() =>
        {
            forecasts.Clear();
            PushEvent($"Streaming started at {DateTime.Now:T}");
            statusMessage = "Waiting for streamed updates...";
        });

        var updateNumber = 0;
        await foreach (var forecast in ForecastService.StreamForecastAsync(6, TimeSpan.FromMilliseconds(750), cancellationToken))
        {
            updateNumber++;
            await UpdateUiAsync(() =>
            {
                forecasts.Add(forecast);
                PushEvent($"Update #{updateNumber} received for {forecast.Date:MMM d}");
                statusMessage = $"Streaming update {updateNumber} of 6.";
            });
        }

        await UpdateUiAsync(() =>
        {
            statusMessage = "Stream completed.";
        });
    }, "Streaming forecast updates...");

    private Task ToggleAutoRefreshAsync()
    {
        if (isAutoRefreshing)
        {
            CancelCurrentOperation();
            return Task.CompletedTask;
        }

        return ExecuteOperationAsync(RunAutoRefreshAsync, $"Auto refreshing every {autoRefreshIntervalSeconds} seconds...");
    }

    private async Task RunAutoRefreshAsync(CancellationToken cancellationToken)
    {
        isAutoRefreshing = true;
        await UpdateUiAsync(() =>
        {
            PushEvent($"Auto refresh started at {DateTime.Now:T} (every {autoRefreshIntervalSeconds}s)");
            statusMessage = "Auto refresh is running.";
        });

        while (!cancellationToken.IsCancellationRequested)
        {
            var snapshot = await ForecastService.GetForecastAsync(cancellationToken);
            await UpdateUiAsync(() =>
            {
                forecasts.Clear();
                forecasts.AddRange(snapshot);
                PushEvent($"Snapshot refreshed at {DateTime.Now:T}");
                statusMessage = $"Snapshot refreshed at {DateTime.Now:T}.";
            });

            await Task.Delay(TimeSpan.FromSeconds(autoRefreshIntervalSeconds), cancellationToken);
        }
    }

    private Task CancelCurrentOperationAsync()
    {
        CancelCurrentOperation();
        return Task.CompletedTask;
    }

    private async Task ExecuteOperationAsync(Func<CancellationToken, Task> operation, string startMessage)
    {
        CancelCurrentOperation();

        var cts = new CancellationTokenSource();
        currentOperationCts = cts;
        isLoading = true;
        statusMessage = startMessage;
        errorMessage = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            await operation(cts.Token);
        }
        catch (OperationCanceledException)
        {
            await UpdateUiAsync(() =>
            {
                statusMessage = "Operation canceled.";
                PushEvent($"Operation canceled at {DateTime.Now:T}");
            });
        }
        catch (Exception ex)
        {
            await UpdateUiAsync(() =>
            {
                errorMessage = $"Something went wrong: {ex.Message}";
                PushEvent($"Error: {ex.Message}");
            });
        }
        finally
        {
            isLoading = false;
            isStreaming = false;
            isAutoRefreshing = false;

            if (ReferenceEquals(currentOperationCts, cts))
            {
                currentOperationCts = null;
            }

            cts.Dispose();
            await InvokeAsync(StateHasChanged);
        }
    }

    private void CancelCurrentOperation()
    {
        if (currentOperationCts is { IsCancellationRequested: false })
        {
            currentOperationCts.Cancel();
        }
    }

    private Task UpdateUiAsync(Action action) => InvokeAsync(() =>
    {
        action();
        StateHasChanged();
    });

    private void PushEvent(string message)
    {
        eventLog.Insert(0, message);

        if (eventLog.Count > 12)
        {
            eventLog.RemoveAt(eventLog.Count - 1);
        }
    }
}
